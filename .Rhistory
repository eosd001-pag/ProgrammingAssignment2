find rtolls()
find rtools()
ffind.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
library(devtools)
find_rtools()
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="~/R/win-library/3.2")
detach("package:devtools", unload=TRUE)
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/win-library/3.2")
detach("package:KernSmooth", unload=TRUE)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,55,z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
q()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
getwd()
ls()
x <- 9
ls
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
ls
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R",to = "mytest2.R")
file.copy(from = "mytest2.R",to = "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(path = file.path("testdir2","testdir3"),recursive = TRUE)
unlink("tesdir2")
unlink("tesdir2", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(dir = old.dir)
unlink(x = "testdir")
unlink(x = "testdir", recursive = TRUE)
rm(list=ls())
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
View(flag)
View(flags)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
rm(flag)
View(flags)
nxt()
bye()
rm(list=ls())
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10)
sample(1:20. 10)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
bye
bye()
q()
library(swirl)
swirl()
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flisp
flips
sum(flips)
?rbinom
rbind(1, size=100, prob=0.7)
rbinom(1, size=100, prob=0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = rbinom(1,100,0.7))
flips2 <- rbinom(c(0,1), size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois()
rpois(n = 5, lambda = 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
play()
class(my_pois)
nxt()
cm <- colMeans(my_pois)
hist(cm)
play()
rm(my_pois)
rm(cm)
rm(flips*)
rm(flips)
rm(flips2)
rm(prob)
nxt()
d1< - Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
t2$min <- 1
play()
t2 <- as.POSIXlt(1445784663)
t2 <- as.POSIXlt(Sys.time(1445784663))
secCT <- as.POSIXct(1445784663)
secCT <- as.Date.POSIXct(1445784663)
t2 <- as.POSIXlt(secCT)
t2
unclass(t2)
class(t1)
unclass(t1)
class(secCT)
secCT <- as.POSIXct.numeric(1445784663)
secCT <- as.POSIXct.POSIXlt(1445784663)
secCT <- as.POSIXlt(Sys.time())
secCT <- as.POSIXlt(1445784663)
secCT <- as.POSIXlt(Sys.time()-150)
secCT <- as.POSIXlt(Sys.time()-200)
secCT <- as.POSIXlt(Sys.time()-500)
secCT <- as.POSIXlt(Sys.time()-1500)
secCT <- as.POSIXlt(Sys.time()-1000)
secCT <- as.POSIXlt(Sys.time()-1200)
secCT <- as.POSIXlt(Sys.time()-1250)
secCT <- as.POSIXlt(Sys.time()-1350)
secCT <- as.POSIXlt(Sys.time()-1300)
secCT <- as.POSIXlt(Sys.time()-1320)
secCT <- as.POSIXlt(Sys.time()-1330)
secCT <- as.POSIXlt(Sys.time()-1340)
secCT <- as.POSIXlt(Sys.time()-1350)
secCT <- as.POSIXlt(Sys.time()-1350)
secCT <- as.POSIXlt(Sys.time()-1355)
secCT <- as.POSIXlt(Sys.time()-1360)
t2<-secCT
rm(secCT)
t1
t2
class(t1)
class(t2)
unclass(t1)
unclass(t2)
t3 <- as.POSIXlt(Sys.time())
class(t3)
rm(t3)
nxt()
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days'))
difftime(Sys.time(), t1, units='days')
q()
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
play()
nxt
nxt()
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(fomula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list=ls())
q()
f1 <- gl(2,5)
f2 <- gl(5,2)
x <- rnorm(10)
F1
f1
f2
interaction(f1,f2)
str(split(x, list(f1,f2)))
str(split(x, list(f1,f2), drop=true)
)
str(split(x, list(f1,f2), drop=TRUE))
log(-1)
?invisible
print(x)
x<-"Hello"
print(x)
invisible(x)
print(NA)
x <- log(-1)
x
is.na(x)
mean(x)
traceback()
x<-"d"
traceback()
lm(x~y)
traceback()
rm(x)
library(datasets)
data(iris)
?iris
dim(iris)
View(iris)
mean(iris$Sepal.Length)
n<-mean(iris$Sepal.Length)
class(n)
n<-""
rm(n)
apply(iris[,1:4], mean)
rowMeans(iris[,1:4])
m<-rowMeans(iris[,1:4])
rm(m)
apply(iris,2,mean)
?apply
m<-apply(X = iris,2,mean)
m<-apply(iris,2,mean)
m<-apply(iris[,1:4],2,mean)
m
data(mtcars)
rm(m)
?mtcars
mtcars
dim(mtcars)
View(mtcars)
class(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
unique(mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(82.63636)
abs(82.63636 - 209.21429)
abs(209.21429 - 82.63636)
debug(ls)
ls()
library(datasets)
data(iris)
data(mtcars)
tapply(iris, ,FUN = mean)
tapply(iris,2 ,FUN = mean)
tapply(iris, iris ,FUN = mean)
tapply(iris, iris$Sepal.Length ,FUN = mean)
apply(iris[,1:4],2,mean)
View(iris)
iris_virginica <- split(iris, iris$Species=="virginica")
iris_virginica
iv.m <- as.matrix(iris_virginica)
View(iv.m)
rm(iv.m)
mean(iris$Sepal.Length, iris$Species=="virginica")
mean(iris$Sepal.Length)
rm(iris_virginica)
tapply(iris, iris$Species, mean)
tapply(iris, iris$Species, mean, ncol=1:4)
tapply(iris, iris$Sepal.Length, mean, ncol=1:4)
tapply(iris, iris$Sepal.Length, mean)
?apply
dim(iris)
class(iris)
summary(iris)
summary(iris)
s<-split(iris,f = iris$Species=="virginica")
s
rm(s)
?split
f<-iris$Species
split(iris,f)
View(iris)
d<-iris[100:150,]
d
d<-iris[101:150,]
View(d)
mean(d$Sepal.Length)
setwd("~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2")
ls
dir
dir()
library(datasets)
data("discoveries")
View(discoveries)
class(discoveries)
rm(discoveries)
data(iris)
dim(iris)
summary(iris)
View(iris)
?solve
View(iris)
m <- as.matrix(iris)
m
m <- as.matrix(iris[,1:4])
m
rm(iris)
summary(m)
myMatrix <- m
rm(m)
solve(myMatrix)
View(myMatrix)
?mean
x <- c(2,16)
y <- c(9,25)
myMatrix <- matrix(x,y)
myMatrix <- rbind(x,y)
View(myMatrix)
solve(myMatrix)
myMatrix
myMatrix[1,1] <- 4
View(myMatrix)
solve(myMatrix)
invMatrix <- solve(x)
invMatrix <- solve(myMatrix)
View(invMatrix)
debug(cachematrix)
rm(list=ls())
debugSource('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
x <- c(4,9)
y <- c(16,25)
myMatrix <- rbind(x,y)
rm(x)
rm(y)
View(myMatrix)
makeCacheMatrix(myMatrix)
cacheSolve(myMatrix)
m<-makecachematrix(myMatrix)
myMatrix
m <- makeCacheMatrix(myMatrix)
m<-NULL
lm
?lm
rm(list=ls())
search()
f <- function(x,y){}
f
f <- function(x,y){x*y}
f(2,3)
f
f <- function(x,y){(x*y)+z}
f(2,3)
z=1
f(2,3)
rm(z)
rm(f)
myMatrix <- as.matrix(c(2,4),c(6,8))
View(myMatrix)
rm(myMatrix)
pnorm(1)
qnorm(0.8413447)
qnorm(1)
qnorm(2)
pnorm(4)
pnorm(2)
pnorm(1)
pnorm(2)
pnorm(3)
pnorm(3), qnorm(0.9986501)
qnorm(0.9986501)
pnorm(1:5)
pnorm(10:15)
pnorm(1:15)
pnorm(0.1:2)
pnorm(0.01:2)
pnorm(0.5)
pnorm(0.7)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(10)
set.seed(1)
rnorm(5)
rnorm(5)
x<-pnorm(c(1,2))
x<-pnorm(c(0.5,0.8))
y<-qnorm(c(pnorm(0.5),pnorm(0.8)))
myMatrix <- rbind(x,y)
View(myMatrix)
solve(myMatrix)
myMatrix[1,1] <- 2
myMatrix[1,2] <- 4
myMatrix[2,1] <- 6
myMatrix[2,2] <- 8
myMatrix
solve(myMatrix)
rm(x)
rm(y)
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
myInv <- cacheSolve(myMatrix)
View(myInv)
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
rm(myInv)
myinv <- cacheSolve(myMatrix)
search()
set
m<<-"K"
k
m
m
rm(m)
myMatrix
invMatrix <- solve(myMatrix)
invMatrix
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
View(myMatrix)
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(myMatrix)
x
x$get()
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
debugSource('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
rm(invMatrix)
rm(x)
x <- makeCacheMatrix(myMatrix)
x$get()
inv <- cacheSolve(x)
x$get()
class(x$get())
class(myMatrix)
x
debugSource('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
source('~/R/DataScience_Coursera/Assignment2/ProgrammingAssignment2/cachematrix.R')
